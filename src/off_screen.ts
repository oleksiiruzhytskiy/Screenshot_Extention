import { log } from "./utils/logger";
chrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {
  if (message.action === "captureScreen") {
    log("‚ö° –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞...");
    try {
      log("üîç –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º...");
      const stream = await navigator.mediaDevices
        .getDisplayMedia({
          video: true,
        })
        .then((stream) => {
          log("‚úÖ –ü–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω inside THEN:", stream);
          log(
            "üì∫ –¢–∏–ø —ç–∫—Ä–∞–Ω–∞:",
            stream.getVideoTracks()[0].getSettings().displaySurface
          );
          return stream;
        })
        .catch((err) => log("‚ùå –û—à–∏–±–∫–∞:", err));

      log("–ü–æ–ª—É—á–µ–Ω –ø–æ—Ç–æ–∫:", stream);

      if (!stream) {
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–æ–∫.");
        return;
      }

      const track = stream.getVideoTracks()[0];
      log("üìπ –ü–æ–ª—É—á–µ–Ω –≤–∏–¥–µ–æ-—Ç—Ä–µ–∫:", track);

      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      if (!ctx) {
        log("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ canvas.");
        return;
      }

      const videoElement = document.createElement("video");
      videoElement.srcObject = stream;
      videoElement.play();

      videoElement.onloadeddata = () => {
        canvas.width = videoElement.videoWidth;
        canvas.height = videoElement.videoHeight;

        ctx.drawImage(videoElement, 0, 0);

        log("üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω!");

        const dataUrl = canvas.toDataURL("image/jpeg", 0.7);

        chrome.runtime.sendMessage({
          action: "screenshotCaptured",
          dataUrl: dataUrl,
        });
        log("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.");
        setTimeout(() => {
          track.stop();
        }, 500);
        log("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–∏–¥–µ–æ-—Ç—Ä–µ–∫.");
      };
    } catch (error) {
      log("‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞:", log);
      const logMessage =
        error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      chrome.runtime.sendMessage({
        action: "capturelog",
        log: logMessage,
      });
    }
  }
});
