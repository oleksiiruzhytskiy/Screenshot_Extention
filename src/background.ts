import {log} from './utils/logger';

chrome.runtime.onInstalled.addListener(() => {
  log('–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ "–°–∫—Ä–∏–Ω—à–æ—Ç–µ—Ä" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
});

async function ensureOffscreenDocument() {
  try {
    const offscreenUrl = chrome.runtime.getURL("off_screen.html");
    log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º offscreen URL:", offscreenUrl);

    const contexts = await chrome.runtime.getContexts({
      contextTypes: [chrome.runtime.ContextType.OFFSCREEN_DOCUMENT],
    }).then(contexts => contexts || []);
    if (contexts.length > 0) {
      log("‚úÖ Offscreen document —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
      chrome.runtime.sendMessage({ action: "captureScreen" });
      return;
    }

    log("‚ö° –°–æ–∑–¥–∞—ë–º offscreen –¥–æ–∫—É–º–µ–Ω—Ç...");
    await chrome.offscreen.createDocument({
      url: offscreenUrl,
      reasons: [chrome.offscreen.Reason.DISPLAY_MEDIA],
      justification: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞.",
    });

    log("‚úÖ Offscreen document —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");

    chrome.runtime.sendMessage({ action: "captureScreen" });
  } catch (error) {
    log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ offscreen-–¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
  }
}

chrome.runtime.onMessage.addListener((message) => {
  if (message.action === "requestCapture") {
    log("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);
    ensureOffscreenDocument();
  } else if (message.action === "captureError") {
    log("‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞:", message.error);
  }
});
